{
  "stats": {
    "suites": 10,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-21T14:56:16.518Z",
    "end": "2025-08-21T14:56:20.005Z",
    "duration": 3487,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "07d94a96-3327-4902-8483-bee026fe60a5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3cbe28a4-ebea-492a-83a7-434bf8045420",
          "title": "Casos funcionais negativos extras (pt-BR)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/extra-negative.spec.js",
          "file": "/test/functional/extra-negative.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Casos funcionais negativos extras (pt-BR)\"",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) \"before each\" hook in \"Casos funcionais negativos extras (pt-BR)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "7a5102c2-2058-435f-a73c-5a9174101910",
              "parentUUID": "3cbe28a4-ebea-492a-83a7-434bf8045420",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "retorna 400 ao enviar nome como número no registro",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao enviar nome como número no registro",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/users/register').send({ name: 123, email: 'a@b.com', password: '123456' });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "b55cd201-a73d-4908-8502-dc8efb93c89b",
              "parentUUID": "3cbe28a4-ebea-492a-83a7-434bf8045420",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 400 ao criar alimento com calories nulo",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao criar alimento com calories nulo",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'A', email: 'a2@b.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'a2@b.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ name: 'X', calories: null });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "3df37c37-1484-451f-9bd7-3e636308a0c8",
              "parentUUID": "3cbe28a4-ebea-492a-83a7-434bf8045420",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 400 ao criar refeição com array vazio de foods",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao criar refeição com array vazio de foods",
              "timedOut": false,
              "duration": 370,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'B', email: 'b@b.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'b@b.com', password: '123456' });\nconst token = login.body.token;\n  const res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ foods: [] });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "3c52186d-88d7-43ff-9c8c-46a0d22d2e0a",
              "parentUUID": "3cbe28a4-ebea-492a-83a7-434bf8045420",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 401 ao acessar rota protegida com token inválido",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 401 ao acessar rota protegida com token inválido",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/foods').set('Authorization', 'Bearer invalid.token').send({ name: 'Z', calories: 10 });\nexpect(res.status).to.equal(401);",
              "err": {},
              "uuid": "409b9b62-d0c8-4cab-adeb-e6837978ff31",
              "parentUUID": "3cbe28a4-ebea-492a-83a7-434bf8045420",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 400 ao atualizar alimento com campo extra inesperado",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao atualizar alimento com campo extra inesperado",
              "timedOut": false,
              "duration": 195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'C', email: 'c@c.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'c@c.com', password: '123456' });\nconst token = login.body.token;\nconst f = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ name: 'Y', calories: 20 });\nconst id = f.body.id;\nconst res = await request(app).put(`/foods/${id}`).set('Authorization', `Bearer ${token}`).send({ name: 'Y', calories: 22, unexpected: true });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "6372409f-8a04-4aa1-b412-510e3a066a3a",
              "parentUUID": "3cbe28a4-ebea-492a-83a7-434bf8045420",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b55cd201-a73d-4908-8502-dc8efb93c89b",
            "3df37c37-1484-451f-9bd7-3e636308a0c8",
            "3c52186d-88d7-43ff-9c8c-46a0d22d2e0a",
            "409b9b62-d0c8-4cab-adeb-e6837978ff31",
            "6372409f-8a04-4aa1-b412-510e3a066a3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 817,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2abdb68a-3afe-4db4-82d6-d6e34791bbdb",
          "title": "Endpoints de Alimentos (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/food.spec.js",
          "file": "/test/functional/food.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Endpoints de Alimentos (funcional)\"",
              "fullTitle": "Endpoints de Alimentos (funcional) \"before each\" hook in \"Endpoints de Alimentos (funcional)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "2560e9bd-8eb2-4390-9aa9-d102af193c11",
              "parentUUID": "2abdb68a-3afe-4db4-82d6-d6e34791bbdb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve criar um alimento",
              "fullTitle": "Endpoints de Alimentos (funcional) deve criar um alimento",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'Food', email: 'f@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Banana', category: 'Fruta', calories: 89 });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('id');\nexpect(res.body).to.have.property('createdAt');\nexpect(res.body).to.have.property('updatedAt');",
              "err": {},
              "uuid": "fd053825-3b19-4efd-b948-739932cb4c6f",
              "parentUUID": "2abdb68a-3afe-4db4-82d6-d6e34791bbdb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd053825-3b19-4efd-b948-739932cb4c6f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 188,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fc6f1fc0-8afa-4600-a318-58d82d825b4a",
          "title": "Endpoints de Refeição (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/meal.spec.js",
          "file": "/test/functional/meal.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Endpoints de Refeição (funcional)\"",
              "fullTitle": "Endpoints de Refeição (funcional) \"before each\" hook in \"Endpoints de Refeição (funcional)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "f5d02c6f-2efe-41dd-8cbd-c251f72b90c2",
              "parentUUID": "fc6f1fc0-8afa-4600-a318-58d82d825b4a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve criar uma refeição e computar totais",
              "fullTitle": "Endpoints de Refeição (funcional) deve criar uma refeição e computar totais",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm@example.com', password: '123456' });\nconst token = login.body.token;\nconst foodRes = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Apple', calories: 52, protein: 0.3, carbs: 14, fat: 0.2 });\nconst foodId = foodRes.body.id;\nconst res = await request(app)\n  .post('/meals')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ foods: [foodId] });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('totalCalories');\nexpect(res.body.totalCalories).to.equal(52);",
              "err": {},
              "uuid": "0a77b8d5-b3e9-4ac0-8a3e-efea94b787c8",
              "parentUUID": "fc6f1fc0-8afa-4600-a318-58d82d825b4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a77b8d5-b3e9-4ac0-8a3e-efea94b787c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 207,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9cc375b5-0e25-4d12-9fa6-4315bd1454e9",
          "title": "Testes funcionais negativos / validação",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
          "file": "/test/functional/negative.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testes funcionais negativos / validação\"",
              "fullTitle": "Testes funcionais negativos / validação \"before each\" hook in \"Testes funcionais negativos / validação\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "6653328a-8553-42cc-b039-c9a8bbfb15a1",
              "parentUUID": "9cc375b5-0e25-4d12-9fa6-4315bd1454e9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f311d09a-8097-487b-85ad-6789c16adf0b",
              "title": "Validação de usuários e erros de autenticação",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
              "file": "/test/functional/negative.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "retorna 400 ao registrar sem senha",
                  "fullTitle": "Testes funcionais negativos / validação Validação de usuários e erros de autenticação retorna 400 ao registrar sem senha",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/users/register').send({ name: 'NoPass', email: 'nopass@example.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors').that.is.an('array');",
                  "err": {},
                  "uuid": "74d05c94-c14d-4854-b093-15e414a09926",
                  "parentUUID": "f311d09a-8097-487b-85ad-6789c16adf0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 ao registrar com nome vazio",
                  "fullTitle": "Testes funcionais negativos / validação Validação de usuários e erros de autenticação retorna 400 ao registrar com nome vazio",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/users/register').send({ name: '', email: 'blank@example.com', password: '123456' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "e85dab2b-24bb-4d65-8a3c-2d24dd18a55a",
                  "parentUUID": "f311d09a-8097-487b-85ad-6789c16adf0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 401 ao autenticar com credenciais incorretas",
                  "fullTitle": "Testes funcionais negativos / validação Validação de usuários e erros de autenticação retorna 401 ao autenticar com credenciais incorretas",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'Login', email: 'login@example.com', password: 'correct' });\nconst res = await request(app).post('/users/login').send({ email: 'login@example.com', password: 'wrong' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "e704065d-2dad-4bd7-80b2-da49e4812b51",
                  "parentUUID": "f311d09a-8097-487b-85ad-6789c16adf0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74d05c94-c14d-4854-b093-15e414a09926",
                "e85dab2b-24bb-4d65-8a3c-2d24dd18a55a",
                "e704065d-2dad-4bd7-80b2-da49e4812b51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 183,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "28842421-ffb1-4a7f-84be-4d374b8725f1",
              "title": "Validação de alimentos e autenticação",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
              "file": "/test/functional/negative.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "retorna 401 ao criar alimento sem token",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 401 ao criar alimento sem token",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/foods').send({ name: 'NoAuth', calories: 10 });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "8ab00610-2dbf-4eec-b47c-41371e87efec",
                  "parentUUID": "28842421-ffb1-4a7f-84be-4d374b8725f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 ao criar alimento sem nome",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 400 ao criar alimento sem nome",
                  "timedOut": false,
                  "duration": 194,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'F', email: 'f2@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f2@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ calories: 10 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "5459010c-d5f9-45cc-92d8-7d3feecd6aae",
                  "parentUUID": "28842421-ffb1-4a7f-84be-4d374b8725f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 quando calories tem tipo errado",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 400 quando calories tem tipo errado",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'F', email: 'f3@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f3@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ name: 'Apple', calories: 'not-a-number' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "f869fbd7-d4d7-4e80-bdfa-b41fe1115cfe",
                  "parentUUID": "28842421-ffb1-4a7f-84be-4d374b8725f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 403 quando usuário não-admin tenta atualizar alimento",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 403 quando usuário não-admin tenta atualizar alimento",
                  "timedOut": false,
                  "duration": 376,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// first register admin (first user is admin)\nawait request(app).post('/users/register').send({ name: 'Admin', email: 'admin@example.com', password: '123456' });\n// create another normal user\nawait request(app).post('/users/register').send({ name: 'User', email: 'user@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'user@example.com', password: '123456' });\nconst token = login.body.token;\n// admin creates food\nconst adminLogin = await request(app).post('/users/login').send({ email: 'admin@example.com', password: '123456' });\nconst adminToken = adminLogin.body.token;\nconst created = await request(app).post('/foods').set('Authorization', `Bearer ${adminToken}`).send({ name: 'Milk', calories: 42 });\nconst id = created.body.id;\n// non-admin tries to update\nconst res = await request(app).put(`/foods/${id}`).set('Authorization', `Bearer ${token}`).send({ name: 'Milk', calories: 50 });\nexpect(res.status).to.equal(403);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "6cd1cedd-5b39-4c70-8303-ce977f7dd327",
                  "parentUUID": "28842421-ffb1-4a7f-84be-4d374b8725f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ab00610-2dbf-4eec-b47c-41371e87efec",
                "5459010c-d5f9-45cc-92d8-7d3feecd6aae",
                "f869fbd7-d4d7-4e80-bdfa-b41fe1115cfe",
                "6cd1cedd-5b39-4c70-8303-ce977f7dd327"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 752,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b78aa928-7ebc-47d0-9df1-a0b567a7c11b",
              "title": "Validação de refeições e erros de negócio",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
              "file": "/test/functional/negative.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "retorna 400 ao criar refeição sem lista de alimentos",
                  "fullTitle": "Testes funcionais negativos / validação Validação de refeições e erros de negócio retorna 400 ao criar refeição sem lista de alimentos",
                  "timedOut": false,
                  "duration": 202,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm2@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm2@example.com', password: '123456' });\nconst token = login.body.token;\n\n  const res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "a9888d8a-b7e0-44c0-8110-7983a6609626",
                  "parentUUID": "b78aa928-7ebc-47d0-9df1-a0b567a7c11b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 quando foods não é um array",
                  "fullTitle": "Testes funcionais negativos / validação Validação de refeições e erros de negócio retorna 400 quando foods não é um array",
                  "timedOut": false,
                  "duration": 182,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm3@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm3@example.com', password: '123456' });\nconst token = login.body.token;\n\n  const res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ foods: 'not-an-array' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "9801a817-224d-4466-954c-094362d434bd",
                  "parentUUID": "b78aa928-7ebc-47d0-9df1-a0b567a7c11b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 quando refeição referencia id de alimento inexistente",
                  "fullTitle": "Testes funcionais negativos / validação Validação de refeições e erros de negócio retorna 400 quando refeição referencia id de alimento inexistente",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm4@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm4@example.com', password: '123456' });\nconst token = login.body.token;\n\n  const res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ foods: ['non-existing-id'] });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "2742e052-22a6-4f20-ba84-2abd6941e164",
                  "parentUUID": "b78aa928-7ebc-47d0-9df1-a0b567a7c11b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9888d8a-b7e0-44c0-8110-7983a6609626",
                "9801a817-224d-4466-954c-094362d434bd",
                "2742e052-22a6-4f20-ba84-2abd6941e164"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 559,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "83bed65d-d6c6-4de9-8ccd-a83406b3686d",
          "title": "Validação strict (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/strict.spec.js",
          "file": "/test/functional/strict.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Validação strict (funcional)\"",
              "fullTitle": "Validação strict (funcional) \"before each\" hook in \"Validação strict (funcional)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "b6db8e02-f6da-4ff0-8cc7-9a2a8729ef30",
              "parentUUID": "83bed65d-d6c6-4de9-8ccd-a83406b3686d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST /users/register rejeita campos extras",
              "fullTitle": "Validação strict (funcional) POST /users/register rejeita campos extras",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/users/register').send({ name: 'X', email: 'x@example.com', password: '123456', extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "f84db5dc-3653-4b64-b67c-f7c193f476dd",
              "parentUUID": "83bed65d-d6c6-4de9-8ccd-a83406b3686d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /foods rejects extra fields",
              "fullTitle": "Validação strict (funcional) POST /foods rejects extra fields",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'F', email: 'f@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Banana', calories: 89, extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "d3129686-bf25-4c1c-b2dc-168fad6b0264",
              "parentUUID": "83bed65d-d6c6-4de9-8ccd-a83406b3686d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f84db5dc-3653-4b64-b67c-f7c193f476dd",
            "d3129686-bf25-4c1c-b2dc-168fad6b0264"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "954d67ca-7cf9-47bc-9845-d828297bca4a",
          "title": "Validação strict em atualização (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/strict_update.spec.js",
          "file": "/test/functional/strict_update.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Validação strict em atualização (funcional)\"",
              "fullTitle": "Validação strict em atualização (funcional) \"before each\" hook in \"Validação strict em atualização (funcional)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "43907479-38d6-4ba2-b14e-54f3ee0baa96",
              "parentUUID": "954d67ca-7cf9-47bc-9845-d828297bca4a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "PUT /foods/:id rejeita campos extras",
              "fullTitle": "Validação strict em atualização (funcional) PUT /foods/:id rejeita campos extras",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'U', email: 'u@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'u@example.com', password: '123456' });\nconst token = login.body.token;\nconst create = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Orange', calories: 47 });\nconst id = create.body.id;\nconst res = await request(app)\n  .put(`/foods/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Orange', calories: 50, extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "8df3af96-be90-4420-9bf0-34a449c6dd19",
              "parentUUID": "954d67ca-7cf9-47bc-9845-d828297bca4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /meals/:id rejects extra fields",
              "fullTitle": "Validação strict em atualização (funcional) PUT /meals/:id rejects extra fields",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'V', email: 'v@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'v@example.com', password: '123456' });\nconst token = login.body.token;\nconst foodRes = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Pear', calories: 57 });\nconst foodId = foodRes.body.id;\nconst mealRes = await request(app)\n  .post('/meals')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ foods: [foodId] });\nconst mealId = mealRes.body.id;\nconst res = await request(app)\n  .put(`/meals/${mealId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ date: new Date().toISOString(), foods: [foodId], extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "2d78993d-f9d1-4632-8ee0-0b2386968653",
              "parentUUID": "954d67ca-7cf9-47bc-9845-d828297bca4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8df3af96-be90-4420-9bf0-34a449c6dd19",
            "2d78993d-f9d1-4632-8ee0-0b2386968653"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 366,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "729d09ce-69cb-49d2-938e-738630e9789f",
          "title": "Endpoints de Usuário (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/user.spec.js",
          "file": "/test/functional/user.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Endpoints de Usuário (funcional)\"",
              "fullTitle": "Endpoints de Usuário (funcional) \"before each\" hook in \"Endpoints de Usuário (funcional)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "c3fe9293-7c24-450a-8b71-b01c2222d086",
              "parentUUID": "729d09ce-69cb-49d2-938e-738630e9789f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve registrar e autenticar um usuário",
              "fullTitle": "Endpoints de Usuário (funcional) deve registrar e autenticar um usuário",
              "timedOut": false,
              "duration": 171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res1 = await request(app).post('/users/register').send({ name: 'User', email: 'u@example.com', password: '123456' });\nexpect(res1.status).to.equal(201);\nexpect(res1.body).to.have.property('id');\nconst res2 = await request(app).post('/users/login').send({ email: 'u@example.com', password: '123456' });\nexpect(res2.status).to.equal(200);\nexpect(res2.body).to.have.property('token');",
              "err": {},
              "uuid": "c38c6f60-0e44-476f-9127-4c652c564420",
              "parentUUID": "729d09ce-69cb-49d2-938e-738630e9789f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c38c6f60-0e44-476f-9127-4c652c564420"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 171,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "reportFilename": "mochawesome",
        "quiet": "true",
        "reportTitle": "mts20t1-ppp-nutrify - Relatório de Testes (pt-BR)",
        "reportPageTitle": "Relatório Mochawesome - pt-BR",
        "inlineAssets": "false",
        "timestamp": "false",
        "overwrite": "true"
      },
      "version": "6.2.0"
    }
  }
}