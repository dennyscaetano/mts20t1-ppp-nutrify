{
  "stats": {
    "suites": 10,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-21T14:11:21.883Z",
    "end": "2025-08-21T14:11:25.386Z",
    "duration": 3503,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7b72a1d0-afeb-4520-97e0-0b356b368fab",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4223b868-96f0-4830-831e-7f64b95c3890",
          "title": "Casos funcionais negativos extras (pt-BR)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/extra-negative.spec.js",
          "file": "/test/functional/extra-negative.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Casos funcionais negativos extras (pt-BR)\"",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) \"before each\" hook in \"Casos funcionais negativos extras (pt-BR)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "938de5f1-2a4c-4072-985d-175b4ae48a7d",
              "parentUUID": "4223b868-96f0-4830-831e-7f64b95c3890",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "retorna 400 ao enviar nome como número no registro",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao enviar nome como número no registro",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/users/register').send({ name: 123, email: 'a@b.com', password: '123456' });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "1da5af8a-c56a-4260-9e2a-3a1196e7fee0",
              "parentUUID": "4223b868-96f0-4830-831e-7f64b95c3890",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 400 ao criar alimento com calories nulo",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao criar alimento com calories nulo",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'A', email: 'a2@b.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'a2@b.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ name: 'X', calories: null });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "d1aa74c6-93fb-49a6-a8a8-3f5dfa40f16d",
              "parentUUID": "4223b868-96f0-4830-831e-7f64b95c3890",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 400 ao criar refeição com array vazio de foods",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao criar refeição com array vazio de foods",
              "timedOut": false,
              "duration": 181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'B', email: 'b@b.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'b@b.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ date: new Date().toISOString(), foods: [] });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "c06c252a-d378-4687-a073-1e08c046212e",
              "parentUUID": "4223b868-96f0-4830-831e-7f64b95c3890",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 401 ao acessar rota protegida com token inválido",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 401 ao acessar rota protegida com token inválido",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/foods').set('Authorization', 'Bearer invalid.token').send({ name: 'Z', calories: 10 });\nexpect(res.status).to.equal(401);",
              "err": {},
              "uuid": "4c3ae238-7f9a-40e6-b99c-aef9c5028673",
              "parentUUID": "4223b868-96f0-4830-831e-7f64b95c3890",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 400 ao atualizar alimento com campo extra inesperado",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao atualizar alimento com campo extra inesperado",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'C', email: 'c@c.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'c@c.com', password: '123456' });\nconst token = login.body.token;\nconst f = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ name: 'Y', calories: 20 });\nconst id = f.body.id;\nconst res = await request(app).put(`/foods/${id}`).set('Authorization', `Bearer ${token}`).send({ name: 'Y', calories: 22, unexpected: true });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "db8750fc-2d51-4a54-a39a-6c443898af7a",
              "parentUUID": "4223b868-96f0-4830-831e-7f64b95c3890",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1da5af8a-c56a-4260-9e2a-3a1196e7fee0",
            "d1aa74c6-93fb-49a6-a8a8-3f5dfa40f16d",
            "c06c252a-d378-4687-a073-1e08c046212e",
            "4c3ae238-7f9a-40e6-b99c-aef9c5028673",
            "db8750fc-2d51-4a54-a39a-6c443898af7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 609,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "db92bd10-8353-4d6b-82a9-aa2c0f8f5681",
          "title": "Endpoints de Alimentos (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/food.spec.js",
          "file": "/test/functional/food.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Endpoints de Alimentos (funcional)\"",
              "fullTitle": "Endpoints de Alimentos (funcional) \"before each\" hook in \"Endpoints de Alimentos (funcional)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "1869f581-234c-423a-80c4-a2b1d87ed51d",
              "parentUUID": "db92bd10-8353-4d6b-82a9-aa2c0f8f5681",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve criar um alimento",
              "fullTitle": "Endpoints de Alimentos (funcional) deve criar um alimento",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'Food', email: 'f@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Banana', category: 'Fruta', calories: 89 });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('id');\nexpect(res.body).to.have.property('createdAt');\nexpect(res.body).to.have.property('updatedAt');",
              "err": {},
              "uuid": "b67a5e22-2273-44e3-97d6-653f675f8d7a",
              "parentUUID": "db92bd10-8353-4d6b-82a9-aa2c0f8f5681",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b67a5e22-2273-44e3-97d6-653f675f8d7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 180,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "eed7e095-ce82-44c3-9e53-d53d6b393c8c",
          "title": "Endpoints de Refeição (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/meal.spec.js",
          "file": "/test/functional/meal.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Endpoints de Refeição (funcional)\"",
              "fullTitle": "Endpoints de Refeição (funcional) \"before each\" hook in \"Endpoints de Refeição (funcional)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "3b973ea7-f9b9-4ac3-88dc-dd64280a176b",
              "parentUUID": "eed7e095-ce82-44c3-9e53-d53d6b393c8c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve criar uma refeição e computar totais",
              "fullTitle": "Endpoints de Refeição (funcional) deve criar uma refeição e computar totais",
              "timedOut": false,
              "duration": 192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm@example.com', password: '123456' });\nconst token = login.body.token;\nconst foodRes = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Apple', calories: 52, protein: 0.3, carbs: 14, fat: 0.2 });\nconst foodId = foodRes.body.id;\nconst res = await request(app)\n  .post('/meals')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ date: new Date().toISOString(), foods: [foodId] });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('totalCalories');\nexpect(res.body.totalCalories).to.equal(52);",
              "err": {},
              "uuid": "cd2c0834-a6f7-401d-8909-387f6c753ab8",
              "parentUUID": "eed7e095-ce82-44c3-9e53-d53d6b393c8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cd2c0834-a6f7-401d-8909-387f6c753ab8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 192,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9c316fb7-b479-49a9-855a-2f4061408fc2",
          "title": "Testes funcionais negativos / validação",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
          "file": "/test/functional/negative.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testes funcionais negativos / validação\"",
              "fullTitle": "Testes funcionais negativos / validação \"before each\" hook in \"Testes funcionais negativos / validação\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "73af1cfa-8c5a-4b9a-b706-8e03d5908b6e",
              "parentUUID": "9c316fb7-b479-49a9-855a-2f4061408fc2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1275f30d-9328-49e6-b7c3-77f9196229c7",
              "title": "Validação de usuários e erros de autenticação",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
              "file": "/test/functional/negative.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "retorna 400 ao registrar sem senha",
                  "fullTitle": "Testes funcionais negativos / validação Validação de usuários e erros de autenticação retorna 400 ao registrar sem senha",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/users/register').send({ name: 'NoPass', email: 'nopass@example.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors').that.is.an('array');",
                  "err": {},
                  "uuid": "e86a52a8-e2a0-4839-9e70-b529246dd99c",
                  "parentUUID": "1275f30d-9328-49e6-b7c3-77f9196229c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 ao registrar com nome vazio",
                  "fullTitle": "Testes funcionais negativos / validação Validação de usuários e erros de autenticação retorna 400 ao registrar com nome vazio",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/users/register').send({ name: '', email: 'blank@example.com', password: '123456' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "28f0829c-5846-4ae9-915f-9a604c85aa67",
                  "parentUUID": "1275f30d-9328-49e6-b7c3-77f9196229c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 401 ao autenticar com credenciais incorretas",
                  "fullTitle": "Testes funcionais negativos / validação Validação de usuários e erros de autenticação retorna 401 ao autenticar com credenciais incorretas",
                  "timedOut": false,
                  "duration": 174,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'Login', email: 'login@example.com', password: 'correct' });\nconst res = await request(app).post('/users/login').send({ email: 'login@example.com', password: 'wrong' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "0f045b10-8abd-4675-9da1-f890940214c2",
                  "parentUUID": "1275f30d-9328-49e6-b7c3-77f9196229c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e86a52a8-e2a0-4839-9e70-b529246dd99c",
                "28f0829c-5846-4ae9-915f-9a604c85aa67",
                "0f045b10-8abd-4675-9da1-f890940214c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 181,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "448b4c44-b6be-4b15-8610-0f9a5f9a124d",
              "title": "Validação de alimentos e autenticação",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
              "file": "/test/functional/negative.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "retorna 401 ao criar alimento sem token",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 401 ao criar alimento sem token",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/foods').send({ name: 'NoAuth', calories: 10 });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "640c8fbd-d006-4723-92e2-aea9e3961e8f",
                  "parentUUID": "448b4c44-b6be-4b15-8610-0f9a5f9a124d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 ao criar alimento sem nome",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 400 ao criar alimento sem nome",
                  "timedOut": false,
                  "duration": 273,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'F', email: 'f2@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f2@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ calories: 10 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "97a50d65-ba50-4510-adb3-f0ad4a8ec548",
                  "parentUUID": "448b4c44-b6be-4b15-8610-0f9a5f9a124d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 quando calories tem tipo errado",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 400 quando calories tem tipo errado",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'F', email: 'f3@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f3@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ name: 'Apple', calories: 'not-a-number' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "b631c96a-b544-4cca-a2c2-b79e5b380d1d",
                  "parentUUID": "448b4c44-b6be-4b15-8610-0f9a5f9a124d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 403 quando usuário não-admin tenta atualizar alimento",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 403 quando usuário não-admin tenta atualizar alimento",
                  "timedOut": false,
                  "duration": 450,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// first register admin (first user is admin)\nawait request(app).post('/users/register').send({ name: 'Admin', email: 'admin@example.com', password: '123456' });\n// create another normal user\nawait request(app).post('/users/register').send({ name: 'User', email: 'user@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'user@example.com', password: '123456' });\nconst token = login.body.token;\n// admin creates food\nconst adminLogin = await request(app).post('/users/login').send({ email: 'admin@example.com', password: '123456' });\nconst adminToken = adminLogin.body.token;\nconst created = await request(app).post('/foods').set('Authorization', `Bearer ${adminToken}`).send({ name: 'Milk', calories: 42 });\nconst id = created.body.id;\n// non-admin tries to update\nconst res = await request(app).put(`/foods/${id}`).set('Authorization', `Bearer ${token}`).send({ name: 'Milk', calories: 50 });\nexpect(res.status).to.equal(403);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "8fa3959f-5e2c-4369-b383-ff7f061f7990",
                  "parentUUID": "448b4c44-b6be-4b15-8610-0f9a5f9a124d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "640c8fbd-d006-4723-92e2-aea9e3961e8f",
                "97a50d65-ba50-4510-adb3-f0ad4a8ec548",
                "b631c96a-b544-4cca-a2c2-b79e5b380d1d",
                "8fa3959f-5e2c-4369-b383-ff7f061f7990"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 903,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "47472215-3363-48db-ba04-873f5d14bafe",
              "title": "Validação de refeições e erros de negócio",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
              "file": "/test/functional/negative.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "retorna 400 ao criar refeição sem lista de alimentos",
                  "fullTitle": "Testes funcionais negativos / validação Validação de refeições e erros de negócio retorna 400 ao criar refeição sem lista de alimentos",
                  "timedOut": false,
                  "duration": 194,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm2@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm2@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ date: new Date().toISOString() });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "f7d21a86-351e-4b6b-aadc-47c10fd8c426",
                  "parentUUID": "47472215-3363-48db-ba04-873f5d14bafe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 quando foods não é um array",
                  "fullTitle": "Testes funcionais negativos / validação Validação de refeições e erros de negócio retorna 400 quando foods não é um array",
                  "timedOut": false,
                  "duration": 184,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm3@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm3@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ date: new Date().toISOString(), foods: 'not-an-array' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "f2d37568-5075-483c-adac-e29d951bf6a8",
                  "parentUUID": "47472215-3363-48db-ba04-873f5d14bafe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 quando refeição referencia id de alimento inexistente",
                  "fullTitle": "Testes funcionais negativos / validação Validação de refeições e erros de negócio retorna 400 quando refeição referencia id de alimento inexistente",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm4@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm4@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ date: new Date().toISOString(), foods: ['non-existing-id'] });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "41d595d9-d27d-450b-91af-c57531ab2807",
                  "parentUUID": "47472215-3363-48db-ba04-873f5d14bafe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7d21a86-351e-4b6b-aadc-47c10fd8c426",
                "f2d37568-5075-483c-adac-e29d951bf6a8",
                "41d595d9-d27d-450b-91af-c57531ab2807"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 555,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5676b1f7-cef6-4a85-96f2-bef8aa5e124d",
          "title": "Validação strict (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/strict.spec.js",
          "file": "/test/functional/strict.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Validação strict (funcional)\"",
              "fullTitle": "Validação strict (funcional) \"before each\" hook in \"Validação strict (funcional)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "597d9109-adc8-48d0-b001-446a5e76d255",
              "parentUUID": "5676b1f7-cef6-4a85-96f2-bef8aa5e124d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST /users/register rejeita campos extras",
              "fullTitle": "Validação strict (funcional) POST /users/register rejeita campos extras",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/users/register').send({ name: 'X', email: 'x@example.com', password: '123456', extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "31dc3687-be20-421e-9a35-1aa9a83b0906",
              "parentUUID": "5676b1f7-cef6-4a85-96f2-bef8aa5e124d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /foods rejects extra fields",
              "fullTitle": "Validação strict (funcional) POST /foods rejects extra fields",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'F', email: 'f@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Banana', calories: 89, extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "ba3a966f-7c5a-410d-b768-c7940904c6c4",
              "parentUUID": "5676b1f7-cef6-4a85-96f2-bef8aa5e124d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31dc3687-be20-421e-9a35-1aa9a83b0906",
            "ba3a966f-7c5a-410d-b768-c7940904c6c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 182,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b237d5d6-4e02-4e80-ac63-54adb96f6ee8",
          "title": "Validação strict em atualização (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/strict_update.spec.js",
          "file": "/test/functional/strict_update.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Validação strict em atualização (funcional)\"",
              "fullTitle": "Validação strict em atualização (funcional) \"before each\" hook in \"Validação strict em atualização (funcional)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "1b72b164-ce37-4a0f-a92f-65dd78aa7132",
              "parentUUID": "b237d5d6-4e02-4e80-ac63-54adb96f6ee8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "PUT /foods/:id rejeita campos extras",
              "fullTitle": "Validação strict em atualização (funcional) PUT /foods/:id rejeita campos extras",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'U', email: 'u@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'u@example.com', password: '123456' });\nconst token = login.body.token;\nconst create = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Orange', calories: 47 });\nconst id = create.body.id;\nconst res = await request(app)\n  .put(`/foods/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Orange', calories: 50, extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "b11b0cb6-d3e4-42e6-bb2b-8308d7e9ff48",
              "parentUUID": "b237d5d6-4e02-4e80-ac63-54adb96f6ee8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /meals/:id rejects extra fields",
              "fullTitle": "Validação strict em atualização (funcional) PUT /meals/:id rejects extra fields",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'V', email: 'v@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'v@example.com', password: '123456' });\nconst token = login.body.token;\nconst foodRes = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Pear', calories: 57 });\nconst foodId = foodRes.body.id;\nconst mealRes = await request(app)\n  .post('/meals')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ date: new Date().toISOString(), foods: [foodId] });\nconst mealId = mealRes.body.id;\nconst res = await request(app)\n  .put(`/meals/${mealId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ date: new Date().toISOString(), foods: [foodId], extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "003efa5c-6b97-458b-8893-79c6c5557198",
              "parentUUID": "b237d5d6-4e02-4e80-ac63-54adb96f6ee8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b11b0cb6-d3e4-42e6-bb2b-8308d7e9ff48",
            "003efa5c-6b97-458b-8893-79c6c5557198"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 374,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e7384b52-827e-491e-9703-09679454bdf0",
          "title": "Endpoints de Usuário (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/user.spec.js",
          "file": "/test/functional/user.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Endpoints de Usuário (funcional)\"",
              "fullTitle": "Endpoints de Usuário (funcional) \"before each\" hook in \"Endpoints de Usuário (funcional)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "ee94b590-b54e-463e-9437-fb06963e3607",
              "parentUUID": "e7384b52-827e-491e-9703-09679454bdf0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve registrar e autenticar um usuário",
              "fullTitle": "Endpoints de Usuário (funcional) deve registrar e autenticar um usuário",
              "timedOut": false,
              "duration": 249,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res1 = await request(app).post('/users/register').send({ name: 'User', email: 'u@example.com', password: '123456' });\nexpect(res1.status).to.equal(201);\nexpect(res1.body).to.have.property('id');\nconst res2 = await request(app).post('/users/login').send({ email: 'u@example.com', password: '123456' });\nexpect(res2.status).to.equal(200);\nexpect(res2.body).to.have.property('token');",
              "err": {},
              "uuid": "fa64c1c9-0be4-4220-a00d-45696db3e876",
              "parentUUID": "e7384b52-827e-491e-9703-09679454bdf0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa64c1c9-0be4-4220-a00d-45696db3e876"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 249,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "reportFilename": "mochawesome",
        "quiet": "true",
        "reportTitle": "mts20t1-ppp-nutrify - Relatório de Testes (pt-BR)",
        "reportPageTitle": "Relatório Mochawesome - pt-BR",
        "inlineAssets": "false",
        "timestamp": "false",
        "overwrite": "true"
      },
      "version": "6.2.0"
    }
  }
}