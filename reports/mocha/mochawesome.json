{
  "stats": {
    "suites": 10,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-21T13:26:33.388Z",
    "end": "2025-08-21T13:26:36.457Z",
    "duration": 3069,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "645c7083-6caf-46f5-860b-bec2a57502b3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "33147428-0eea-4730-8458-cc2792ea2f23",
          "title": "Casos funcionais negativos extras (pt-BR)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/extra-negative.spec.js",
          "file": "/test/functional/extra-negative.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Casos funcionais negativos extras (pt-BR)\"",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) \"before each\" hook in \"Casos funcionais negativos extras (pt-BR)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "e6845db7-0974-4505-bbc3-6951929fc829",
              "parentUUID": "33147428-0eea-4730-8458-cc2792ea2f23",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "retorna 400 ao enviar nome como número no registro",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao enviar nome como número no registro",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/users/register').send({ name: 123, email: 'a@b.com', password: '123456' });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "1c909925-7276-4d28-9133-b4380eac11b0",
              "parentUUID": "33147428-0eea-4730-8458-cc2792ea2f23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 400 ao criar alimento com calories nulo",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao criar alimento com calories nulo",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'A', email: 'a2@b.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'a2@b.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ name: 'X', calories: null });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "48e7b0e9-2ad3-4f77-ab88-4c38187ed438",
              "parentUUID": "33147428-0eea-4730-8458-cc2792ea2f23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 400 ao criar refeição com array vazio de foods",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao criar refeição com array vazio de foods",
              "timedOut": false,
              "duration": 177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'B', email: 'b@b.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'b@b.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ date: new Date().toISOString(), foods: [] });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "7f4cae65-40ac-4aaa-9658-885d422e3ab8",
              "parentUUID": "33147428-0eea-4730-8458-cc2792ea2f23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 401 ao acessar rota protegida com token inválido",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 401 ao acessar rota protegida com token inválido",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/foods').set('Authorization', 'Bearer invalid.token').send({ name: 'Z', calories: 10 });\nexpect(res.status).to.equal(401);",
              "err": {},
              "uuid": "5bac4867-98f0-439c-9c97-d896f7805879",
              "parentUUID": "33147428-0eea-4730-8458-cc2792ea2f23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "retorna 400 ao atualizar alimento com campo extra inesperado",
              "fullTitle": "Casos funcionais negativos extras (pt-BR) retorna 400 ao atualizar alimento com campo extra inesperado",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'C', email: 'c@c.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'c@c.com', password: '123456' });\nconst token = login.body.token;\nconst f = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ name: 'Y', calories: 20 });\nconst id = f.body.id;\nconst res = await request(app).put(`/foods/${id}`).set('Authorization', `Bearer ${token}`).send({ name: 'Y', calories: 22, unexpected: true });\nexpect(res.status).to.equal(400);",
              "err": {},
              "uuid": "808eec58-250e-4288-90ae-96b080c90d4d",
              "parentUUID": "33147428-0eea-4730-8458-cc2792ea2f23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c909925-7276-4d28-9133-b4380eac11b0",
            "48e7b0e9-2ad3-4f77-ab88-4c38187ed438",
            "7f4cae65-40ac-4aaa-9658-885d422e3ab8",
            "5bac4867-98f0-439c-9c97-d896f7805879",
            "808eec58-250e-4288-90ae-96b080c90d4d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 611,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "cfdffd7a-27cf-46ea-83e5-d608bed51c48",
          "title": "Endpoints de Alimentos (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/food.spec.js",
          "file": "/test/functional/food.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Endpoints de Alimentos (funcional)\"",
              "fullTitle": "Endpoints de Alimentos (funcional) \"before each\" hook in \"Endpoints de Alimentos (funcional)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "cd3b1f42-7605-40f6-82d8-638c1558c5a8",
              "parentUUID": "cfdffd7a-27cf-46ea-83e5-d608bed51c48",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve criar um alimento",
              "fullTitle": "Endpoints de Alimentos (funcional) deve criar um alimento",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'Food', email: 'f@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Banana', category: 'Fruta', calories: 89 });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('id');\nexpect(res.body).to.have.property('createdAt');\nexpect(res.body).to.have.property('updatedAt');",
              "err": {},
              "uuid": "02c01c32-c92f-4266-bada-5b51dc63bcb9",
              "parentUUID": "cfdffd7a-27cf-46ea-83e5-d608bed51c48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02c01c32-c92f-4266-bada-5b51dc63bcb9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 180,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "80aee093-1bf5-4ba1-9544-cf4cc3cadf8f",
          "title": "Endpoints de Refeição (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/meal.spec.js",
          "file": "/test/functional/meal.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Endpoints de Refeição (funcional)\"",
              "fullTitle": "Endpoints de Refeição (funcional) \"before each\" hook in \"Endpoints de Refeição (funcional)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "ff00547b-618d-47de-88a9-90f5b2ebbe2a",
              "parentUUID": "80aee093-1bf5-4ba1-9544-cf4cc3cadf8f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve criar uma refeição e computar totais",
              "fullTitle": "Endpoints de Refeição (funcional) deve criar uma refeição e computar totais",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm@example.com', password: '123456' });\nconst token = login.body.token;\nconst foodRes = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Apple', calories: 52, protein: 0.3, carbs: 14, fat: 0.2 });\nconst foodId = foodRes.body.id;\nconst res = await request(app)\n  .post('/meals')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ date: new Date().toISOString(), foods: [foodId] });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('totalCalories');\nexpect(res.body.totalCalories).to.equal(52);",
              "err": {},
              "uuid": "2aa15fb1-9d57-4671-a979-19170ab70a93",
              "parentUUID": "80aee093-1bf5-4ba1-9544-cf4cc3cadf8f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2aa15fb1-9d57-4671-a979-19170ab70a93"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 185,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1e6e3446-b93d-47e0-8cb6-05665c0892f6",
          "title": "Testes funcionais negativos / validação",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
          "file": "/test/functional/negative.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testes funcionais negativos / validação\"",
              "fullTitle": "Testes funcionais negativos / validação \"before each\" hook in \"Testes funcionais negativos / validação\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "34c25321-1875-4e6c-9b26-c6c9cdc43424",
              "parentUUID": "1e6e3446-b93d-47e0-8cb6-05665c0892f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "522ad068-ec23-4065-9d19-897f8e788915",
              "title": "Validação de usuários e erros de autenticação",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
              "file": "/test/functional/negative.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "retorna 400 ao registrar sem senha",
                  "fullTitle": "Testes funcionais negativos / validação Validação de usuários e erros de autenticação retorna 400 ao registrar sem senha",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/users/register').send({ name: 'NoPass', email: 'nopass@example.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors').that.is.an('array');",
                  "err": {},
                  "uuid": "49122f85-bec8-4cb6-b336-6066e9a0e1d2",
                  "parentUUID": "522ad068-ec23-4065-9d19-897f8e788915",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 ao registrar com nome vazio",
                  "fullTitle": "Testes funcionais negativos / validação Validação de usuários e erros de autenticação retorna 400 ao registrar com nome vazio",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/users/register').send({ name: '', email: 'blank@example.com', password: '123456' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "cb018ac2-492a-4a08-89a6-d9a6d98017ec",
                  "parentUUID": "522ad068-ec23-4065-9d19-897f8e788915",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 401 ao autenticar com credenciais incorretas",
                  "fullTitle": "Testes funcionais negativos / validação Validação de usuários e erros de autenticação retorna 401 ao autenticar com credenciais incorretas",
                  "timedOut": false,
                  "duration": 169,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'Login', email: 'login@example.com', password: 'correct' });\nconst res = await request(app).post('/users/login').send({ email: 'login@example.com', password: 'wrong' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "c112a52d-8222-4a01-bccc-47b52219ef4d",
                  "parentUUID": "522ad068-ec23-4065-9d19-897f8e788915",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49122f85-bec8-4cb6-b336-6066e9a0e1d2",
                "cb018ac2-492a-4a08-89a6-d9a6d98017ec",
                "c112a52d-8222-4a01-bccc-47b52219ef4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 176,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d5ce9133-9d98-4b42-be5e-de2a167fd25b",
              "title": "Validação de alimentos e autenticação",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
              "file": "/test/functional/negative.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "retorna 401 ao criar alimento sem token",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 401 ao criar alimento sem token",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/foods').send({ name: 'NoAuth', calories: 10 });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "ce2f62b1-f7d7-4829-9b86-7c26ef2538f6",
                  "parentUUID": "d5ce9133-9d98-4b42-be5e-de2a167fd25b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 ao criar alimento sem nome",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 400 ao criar alimento sem nome",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'F', email: 'f2@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f2@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ calories: 10 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "9a8493a1-5d9a-4a33-a190-fef574a39388",
                  "parentUUID": "d5ce9133-9d98-4b42-be5e-de2a167fd25b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 quando calories tem tipo errado",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 400 quando calories tem tipo errado",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'F', email: 'f3@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f3@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/foods').set('Authorization', `Bearer ${token}`).send({ name: 'Apple', calories: 'not-a-number' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "2548983d-d2a1-4820-83a5-6e38ffb90f01",
                  "parentUUID": "d5ce9133-9d98-4b42-be5e-de2a167fd25b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 403 quando usuário não-admin tenta atualizar alimento",
                  "fullTitle": "Testes funcionais negativos / validação Validação de alimentos e autenticação retorna 403 quando usuário não-admin tenta atualizar alimento",
                  "timedOut": false,
                  "duration": 346,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// first register admin (first user is admin)\nawait request(app).post('/users/register').send({ name: 'Admin', email: 'admin@example.com', password: '123456' });\n// create another normal user\nawait request(app).post('/users/register').send({ name: 'User', email: 'user@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'user@example.com', password: '123456' });\nconst token = login.body.token;\n// admin creates food\nconst adminLogin = await request(app).post('/users/login').send({ email: 'admin@example.com', password: '123456' });\nconst adminToken = adminLogin.body.token;\nconst created = await request(app).post('/foods').set('Authorization', `Bearer ${adminToken}`).send({ name: 'Milk', calories: 42 });\nconst id = created.body.id;\n// non-admin tries to update\nconst res = await request(app).put(`/foods/${id}`).set('Authorization', `Bearer ${token}`).send({ name: 'Milk', calories: 50 });\nexpect(res.status).to.equal(403);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "7031688d-f4c4-47ed-820e-681b26d600b1",
                  "parentUUID": "d5ce9133-9d98-4b42-be5e-de2a167fd25b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce2f62b1-f7d7-4829-9b86-7c26ef2538f6",
                "9a8493a1-5d9a-4a33-a190-fef574a39388",
                "2548983d-d2a1-4820-83a5-6e38ffb90f01",
                "7031688d-f4c4-47ed-820e-681b26d600b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 693,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "56df38f5-aa27-4aed-964b-035dceb792ad",
              "title": "Validação de refeições e erros de negócio",
              "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/negative.spec.js",
              "file": "/test/functional/negative.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "retorna 400 ao criar refeição sem lista de alimentos",
                  "fullTitle": "Testes funcionais negativos / validação Validação de refeições e erros de negócio retorna 400 ao criar refeição sem lista de alimentos",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm2@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm2@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ date: new Date().toISOString() });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "bc30b5c7-9e14-48ae-be72-9009ee0f3787",
                  "parentUUID": "56df38f5-aa27-4aed-964b-035dceb792ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 quando foods não é um array",
                  "fullTitle": "Testes funcionais negativos / validação Validação de refeições e erros de negócio retorna 400 quando foods não é um array",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm3@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm3@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ date: new Date().toISOString(), foods: 'not-an-array' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('errors');",
                  "err": {},
                  "uuid": "500a4d76-0a44-4166-a082-add5a0644a7f",
                  "parentUUID": "56df38f5-aa27-4aed-964b-035dceb792ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retorna 400 quando refeição referencia id de alimento inexistente",
                  "fullTitle": "Testes funcionais negativos / validação Validação de refeições e erros de negócio retorna 400 quando refeição referencia id de alimento inexistente",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app).post('/users/register').send({ name: 'M', email: 'm4@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'm4@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app).post('/meals').set('Authorization', `Bearer ${token}`).send({ date: new Date().toISOString(), foods: ['non-existing-id'] });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
                  "err": {},
                  "uuid": "dbe97d79-d174-4599-8ca0-07537a34a07a",
                  "parentUUID": "56df38f5-aa27-4aed-964b-035dceb792ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc30b5c7-9e14-48ae-be72-9009ee0f3787",
                "500a4d76-0a44-4166-a082-add5a0644a7f",
                "dbe97d79-d174-4599-8ca0-07537a34a07a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 518,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "aee4e7cc-2458-4fd2-bf12-a7bfb0831d46",
          "title": "Validação strict (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/strict.spec.js",
          "file": "/test/functional/strict.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Validação strict (funcional)\"",
              "fullTitle": "Validação strict (funcional) \"before each\" hook in \"Validação strict (funcional)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "69f1ff71-2f68-4a95-abba-3b9672f5c740",
              "parentUUID": "aee4e7cc-2458-4fd2-bf12-a7bfb0831d46",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST /users/register rejeita campos extras",
              "fullTitle": "Validação strict (funcional) POST /users/register rejeita campos extras",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/users/register').send({ name: 'X', email: 'x@example.com', password: '123456', extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "ab839dc7-61f1-4c69-8de3-7c5d936b8649",
              "parentUUID": "aee4e7cc-2458-4fd2-bf12-a7bfb0831d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /foods rejects extra fields",
              "fullTitle": "Validação strict (funcional) POST /foods rejects extra fields",
              "timedOut": false,
              "duration": 165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'F', email: 'f@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'f@example.com', password: '123456' });\nconst token = login.body.token;\nconst res = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Banana', calories: 89, extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "30804e3c-5741-429f-a896-42d0386f8f01",
              "parentUUID": "aee4e7cc-2458-4fd2-bf12-a7bfb0831d46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab839dc7-61f1-4c69-8de3-7c5d936b8649",
            "30804e3c-5741-429f-a896-42d0386f8f01"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 168,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "84d1496a-a0ab-4cfc-ae64-f2ecc3e08096",
          "title": "Validação strict em atualização (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/strict_update.spec.js",
          "file": "/test/functional/strict_update.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Validação strict em atualização (funcional)\"",
              "fullTitle": "Validação strict em atualização (funcional) \"before each\" hook in \"Validação strict em atualização (funcional)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "3d00bfe9-f32f-46e5-a2da-f4251bcea0dc",
              "parentUUID": "84d1496a-a0ab-4cfc-ae64-f2ecc3e08096",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "PUT /foods/:id rejeita campos extras",
              "fullTitle": "Validação strict em atualização (funcional) PUT /foods/:id rejeita campos extras",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'U', email: 'u@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'u@example.com', password: '123456' });\nconst token = login.body.token;\nconst create = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Orange', calories: 47 });\nconst id = create.body.id;\nconst res = await request(app)\n  .put(`/foods/${id}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Orange', calories: 50, extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "e898a717-8485-4fb9-83b6-0d0242dfa5f9",
              "parentUUID": "84d1496a-a0ab-4cfc-ae64-f2ecc3e08096",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT /meals/:id rejects extra fields",
              "fullTitle": "Validação strict em atualização (funcional) PUT /meals/:id rejects extra fields",
              "timedOut": false,
              "duration": 181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(app).post('/users/register').send({ name: 'V', email: 'v@example.com', password: '123456' });\nconst login = await request(app).post('/users/login').send({ email: 'v@example.com', password: '123456' });\nconst token = login.body.token;\nconst foodRes = await request(app)\n  .post('/foods')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ name: 'Pear', calories: 57 });\nconst foodId = foodRes.body.id;\nconst mealRes = await request(app)\n  .post('/meals')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ date: new Date().toISOString(), foods: [foodId] });\nconst mealId = mealRes.body.id;\nconst res = await request(app)\n  .put(`/meals/${mealId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ date: new Date().toISOString(), foods: [foodId], extra: 'no' });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "08a05bc4-a0a6-4d11-bddb-5ebd3a77432f",
              "parentUUID": "84d1496a-a0ab-4cfc-ae64-f2ecc3e08096",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e898a717-8485-4fb9-83b6-0d0242dfa5f9",
            "08a05bc4-a0a6-4d11-bddb-5ebd3a77432f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 349,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "842e88f3-6473-4ccb-b7ca-35baf0b5dd45",
          "title": "Endpoints de Usuário (funcional)",
          "fullFile": "/Users/dennysmatos/Projects/julio-de-lima/mts20t1-ppp-nutrify/test/functional/user.spec.js",
          "file": "/test/functional/user.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Endpoints de Usuário (funcional)\"",
              "fullTitle": "Endpoints de Usuário (funcional) \"before each\" hook in \"Endpoints de Usuário (funcional)\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "reset()",
              "err": {},
              "uuid": "ec29a109-014f-40a5-8f3e-d5875fc29c0b",
              "parentUUID": "842e88f3-6473-4ccb-b7ca-35baf0b5dd45",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve registrar e autenticar um usuário",
              "fullTitle": "Endpoints de Usuário (funcional) deve registrar e autenticar um usuário",
              "timedOut": false,
              "duration": 169,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res1 = await request(app).post('/users/register').send({ name: 'User', email: 'u@example.com', password: '123456' });\nexpect(res1.status).to.equal(201);\nexpect(res1.body).to.have.property('id');\nconst res2 = await request(app).post('/users/login').send({ email: 'u@example.com', password: '123456' });\nexpect(res2.status).to.equal(200);\nexpect(res2.body).to.have.property('token');",
              "err": {},
              "uuid": "063e6308-85af-4be2-bcb6-ae15e80c5474",
              "parentUUID": "842e88f3-6473-4ccb-b7ca-35baf0b5dd45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "063e6308-85af-4be2-bcb6-ae15e80c5474"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 169,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "reportFilename": "mochawesome",
        "quiet": "true",
        "reportTitle": "mts20t1-ppp-nutrify - Relatório de Testes (pt-BR)",
        "reportPageTitle": "Relatório Mochawesome - pt-BR",
        "inlineAssets": "false",
        "timestamp": "false",
        "overwrite": "true"
      },
      "version": "6.2.0"
    }
  }
}